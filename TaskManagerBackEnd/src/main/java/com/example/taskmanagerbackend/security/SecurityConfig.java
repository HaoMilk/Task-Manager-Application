package com.example.taskmanagerbackend.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private JwtAuthenticationFilter jwtAuthenticationFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                // Táº¯t CSRF cho cÃ¡c endpoint /api/auth/**
                .csrf(csrf -> csrf
                        .ignoringRequestMatchers("/api/auth/**")  // Táº¯t CSRF cho táº¥t cáº£ cÃ¡c endpoint báº¯t Ä‘áº§u báº±ng /api/auth/
                )
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/api/auth/**").permitAll()  // âœ… Cho phÃ©p login & register mÃ  khÃ´ng cáº§n xÃ¡c thá»±c
                        .anyRequest().authenticated()  // ğŸ”’ CÃ¡c endpoint khÃ¡c yÃªu cáº§u xÃ¡c thá»±c vá»›i token JWT
                )
                // ThÃªm JWT filter trÆ°á»›c khi kiá»ƒm tra UsernamePasswordAuthenticationFilter
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
